---
title: "Power Simulation in a Mixed Effects design using Julia"
author: 
  - name: Chris Jungerius
  - email: d.c.jungerius@vu.nl
format: html
html:
warning: false
error: false
---

In this notebook we'll go through a quick example of setting up a power analysis, using data from an existing, highly-powered study to make credible parameter estimates. The code for setting up a simulation is inspired by/shamelessly stolen from [a great tutorial about this topic by Lisa DeBruine](https://journals.sagepub.com/doi/full/10.1177/2515245920965119) and her appendix on its application for [sensitivity analysis](https://debruine.github.io/lmem_sim/articles/appendix1c_sensitivity.html)

Before we do anything, let's import all the packages we will need:

```{julia}
using DataFrames
using DataFramesMeta
using CSV
using MixedModels
using Gadfly
using Statistics
using Distributions
```

In this example, we will make an estimate of the number of participants we need to replicate a simple and well-established experimental finding: The capture of attention by a colour singleton during visual search for a unique shape singleton. For this example, we are fortunate in that there are many studies of this effect for us to base our parameter estimates on. One recent example is a highly-powered study from the Serences lab purpose-built to be used for sensitivity analysis. First let's import the data for our specific case from the [Adam et al. (2021)](https://www.journalofcognition.org/articles/10.5334/joc.182/) study, which is freely available [in an OSF repository](https://osf.io/u7wvy/), and look at the data.

Note that when previous data doesn't exist (or even if it does, but you don't trust that it's  sufficient to base your effect estimates on) there are alternative ways of determining such parameters, including [formally determining a smallest effect size of interest](https://journals.sagepub.com/doi/full/10.1177/2515245918770963).

The data we chose is from experiment 1c: variable colour singleton search.
We are interested in the raw trial data, not the summary data (We are doing a mixed model after all, not an ANOVA) so we have to grab all the raw files and concatenate them.

```{julia}
all_files = readdir("Experiment_1c", join = true)
dfs = CSV.read.(all_files,DataFrame)
df = vcat(dfs...)
```

Once it's imported, we can take a look at our data, e.g., looking at subject means between the two conditions:

```{julia}

@chain df begin
  @subset(
    :acc.==1, 
    :set_size.==4)
  @transform(
    :rt = :rt .* 1000,
    :subject = string.(:subject)
  )
  groupby([:subject, :distractor])
  @combine(
    :rt = mean(:rt))
  plot(
    layer(
    x=:distractor,
    y=:rt,
    color=:subject,
    Geom.point
    ),
    layer(
    x=:distractor,
    y=:rt,
    color=:subject,
    Geom.line
    ),
    Theme(key_position=:none)
  )
  end

```

We can clearly see typical atttentional capture effects in the data. Now that we have the data, let's model it:

```{julia}

d = @chain df begin
  @subset(
    :acc.==1,
    :set_size.==4)
  @transform(
    :rt = :rt.*1000,
    :subject = string.(:subject))
end

# Our model is simple: RT is dependent on distractor presence, with a random slope and intercept for each subject. More complex models are left as an exercise to the reader.

formula = @formula(rt ~ 1 + distractor + (1 + distractor | subject))
fm1 = fit(MixedModel, formula, d)

```

The above model `rt ~ distractor + ( distractor | subject)` is our putative *data generating process*, the parameters that we believe underly the generation of observed dependent variables, and the relationship between those parameters. The table shown above gives us parameter estimates for all fixed and random effects in the model. Now let's plug those parameters into a simulation!

```{julia}

n_subj     = 10   # number of subjects
n_present  = 200   # number of distractor present trials
n_absent   = 200   # number of distractor absent
beta_0     = 650   # grand mean
beta_1     = 30   # effect of category
tau_0      = 80   # by-subject random intercept sd
tau_1      = 15   # by-subject random slope sd
rho        = 0.35   # correlation between intercept and slope
sigma      = 175 # residual nose

```

Generate trials with their fixed effects:
```{julia}
# simulate a sample of items
# total number of items = n_ingroup + n_outgroup

items = @chain DataFrame(
  :item_id => range(1,n_absent+n_present),
  :category => [repeat(["absent"],n_absent)..., repeat(["present"], n_present)...]
) begin
  @rtransform :X_i = :category == "present" ? 0.5 : -0.5
end

# items.describe()
```

And generate participants with their random intercepts and slopes:

```{julia}

#simulate a sample of subjects

#calculate random intercept / random slope covariance
covar = rho * tau_0 * tau_1

#put values into variance-covariance matrix
cov_mx = [tau_0^2 covar; covar tau_1^2]

#generate the by-subject random effects
dist = MvNormal([0, 0], cov_mx)
subject_rfx = rand(dist, n_subj)

# # combine with subject IDs

subjects = DataFrame(
  :subj_id => string.(range(1,n_subj)),
  :T_0s => subject_rfx[1,:],
  :T_1s => subject_rfx[2,:]
)
```

Now combine and add residual noise to create a complete dataframe:

```{julia}

#cross items and subjects, add noise

dat_sim = @chain crossjoin(subjects,items) begin
  @rtransform @astable begin
    :e_si = rand(Normal(0, sigma), 1)[1]
    #calculate response variable
    :RT = beta_0 + :T_0s + (beta_1 + :T_1s) * :X_i + :e_si
    end
  @select(:subj_id, :item_id, :category, :X_i, :RT)
end
```

Data generated! Does it look like we'd expect?

```{julia}

@chain dat_sim begin
  groupby([:subj_id, :category])
  @combine(
    :RT = mean(:RT))
  plot(
    layer(
    x=:category,
    y=:RT,
    color=:subj_id,
    Geom.point
    ),
    layer(
    x=:category,
    y=:RT,
    color=:subj_id,
    Geom.line
    ),
    Theme(key_position=:none)
  )
  end

```

Looks comparable to the original data! Now let's fit a model to see if we recover the parameters:

```{julia}

simformula = @formula(RT ~ 1 + category + (1 + category | subj_id))
mf2 = fit(MixedModel, simformula, dat_sim)
```

Great, our simulation works - our fixed effect parameter estimates are close to the originals, and statistically significant! Now for a power analysis, we'd put the above in functions and run the code many times for a given combination of parameters. See below:

```{julia}

function my_sim_data(;
  n_subj     = 5,   # number of subjects
  n_present  = 200,   # number of distractor present trials
  n_absent   = 200,   # number of distractor absent
  beta_0     = 650,   # grand mean
  beta_1     = 30,   # effect of category
  tau_0      = 80,   # by-subject random intercept sd
  tau_1      = 15,   # by-subject random slope sd
  rho        = 0.35,   # correlation between intercept and slope
  sigma      = 175 
)
  
  # simulate a sample of items
  # total number of items = n_ingroup + n_outgroup

  items = @chain DataFrame(
    :item_id => range(1,n_absent+n_present),
    :category => [repeat(["absent"],n_absent)..., repeat(["present"], n_present)...]
  ) begin
    @rtransform :X_i = :category == "present" ? 0.5 : -0.5
  end

  #simulate a sample of subjects

  #calculate random intercept / random slope covariance
  covar = rho * tau_0 * tau_1

  #put values into variance-covariance matrix
  cov_mx = [tau_0^2 covar; covar tau_1^2]

  #generate the by-subject random effects
  dist = MvNormal([0, 0], cov_mx)
  subject_rfx = rand(dist, n_subj)

  # # combine with subject IDs

  subjects = DataFrame(
    :subj_id => string.(range(1,n_subj)),
    :T_0s => subject_rfx[1,:],
    :T_1s => subject_rfx[2,:]
  )

  dat_sim = @chain crossjoin(subjects,items) begin
    @rtransform @astable begin
      :e_si = rand(Normal(0, sigma), 1)[1]
      #calculate response variable
      :RT = beta_0 + :T_0s + (beta_1 + :T_1s) * :X_i + :e_si
      end
    @select(:subj_id, :item_id, :category, :X_i, :RT)
  end
  
  dat_sim
end

```

The above function simulates data. The function below combines it with a model fit so we have a function that can be repeatedly called during our power analysis.

```{julia}

function single_run(filename = nothing, args...; kwargs...)
  
  dat_sim = my_sim_data(;kwargs...)
  simformula = @formula(RT ~ 1 + category + (1 + category | subj_id))
  mf = fit(MixedModel, simformula, dat_sim) 
  sim_results = DataFrame(coeftable(mf))
  if length([kwargs...]) != 0
    sim_results = crossjoin(sim_results,DataFrame(kwargs...))
  end
  
  if !isnothing(filename)
    append = isfile(filename)
    CSV.write(filename, sim_results, append = append)
  end  
  sim_results
end

```

Now let's run our sensitivity analysis - we will run our simulation many times (1000+ times, which we can show here because of Julia's blazing speed) for each combination of parameters, and record how often the fixed effect estimates reach significance:
```{julia}

nreps = 1000

params = allcombinations(
  DataFrame,
  :rep        => 1:nreps, # number of runs
  :n_subj     => 8, # number of subjects
  :n_present  => 150,   # number of distractor present trials
  :n_absent   => 150,   # number of distractor absent
  :beta_0     => 650,   # grand mean
  :beta_1     => 30,   # effect of category
  :tau_0      => 80,   # by-subject random intercept sd
  :tau_1      => 15,   # by-subject random slope sd
  :rho        => 0.35,   # correlation between intercept and slope
  :sigma      => 175  # residual (standard deviation)
)

select!(params,Not("rep"))

alpha = .05

sims = vcat([single_run(;r...) for r in Tables.rowtable(params)]...)

@chain sims begin
  @select(:Name, $"Pr(>|z|)")
  @transform :p = $"Pr(>|z|)" .< alpha
  groupby(:Name)
  @combine :power = mean(:p)
end

```

If we want to run our sensitivity analysis across a given parameter space, we'll have to map the function single_run to generate data across this space, for example, over a varying number of participants:

```{julia}
filename1 = "sens_jl.csv"

nreps = 1000

params = allcombinations(
  DataFrame,
  :rep        => 1:nreps, # number of runs
  :n_subj     => 2:15, # number of subjects
  :n_present  => 150,   # number of distractor present trials
  :n_absent   => 150,   # number of distractor absent
  :beta_0     => 650,   # grand mean
  :beta_1     => 30,   # effect of category
  :tau_0      => 80,   # by-subject random intercept sd
  :tau_1      => 15,   # by-subject random slope sd
  :rho        => 0.35,   # correlation between intercept and slope
  :sigma      => 175  # residual (standard deviation)
)

select!(params,Not("rep"))

alpha = 0.05

if !isfile(filename1)
  sims = vcat([single_run(filename1; r...) for r in Tables.rowtable(params)]...)
end


```

Note that the above could obviously also be run over other dimensions of our parameter space, e.g. for different estimates of the fixed effects, amount of noise, number of trials, etc. etc., by changing the `params` list.
How did we do? Let's take a look at our power curve.

```{julia}

sims1 = CSV.read("sens_jl.csv", DataFrame)

power1 = @chain sims1 begin
  @subset :Name .== "category: present"
  @transform :p = $"Pr(>|z|)" .< alpha
  groupby([:Name, :n_subj])
  @combine begin
  :mean_estimate = mean($"Coef.")
  :mean_se = mean($"Std. Error")
  :power = mean(:p)  
  end
end

```

```{julia}

plot(
  power1,
  layer(
    x=:n_subj,
    y=:power,
    Geom.smooth,
    yintercept=[0.8],
    Geom.hline
  ),
  layer(
    x=:n_subj,
    y=:power,
    Geom.point
  )
)


```

Our power analysis suggests that, with the parameters established above, we need ~8 or more participants to reliably detect an effect!

The code used above is specific to power analysis for mixed models, but the approach generalises to other methods too, of course! The above code can easily be wrangled to handle different model types (simply change the model definition in `single_run` and make sure to capture the right parameters), and even Bayesian approaches. (For a thorough example of doing power analysis with Bayesian methods and the awesome bayesian regression package `brms`, see [this blog post](https://solomonkurz.netlify.app/post/bayesian-power-analysis-part-i/)).

Even if the above code is spaghetti to you ([Perhaps you prefer R?](index.qmd) [Or Python?](python.qmd)), I hope you will take away a few things from this tutorial:

- Power analysis is nothing more than testing whether we can recover the parameters of a hypothesised data-generating process reliably using our statistical test of choice.
- We can determine the parameters for such a data-generating process in the same way we formulate hypotheses (and indeed, *in some ways these two things are one and the same*): we use our knowledge, intuition, and previous work to inform our decision-making.
- If you have a hypothetical data-generating process, you can simulate data by simply formalising that process as code and letting it simulate a dataset
- Simulation can help you answer questions about your statistical approach that are difficult to answer with other tools


