{"title":"Power Simulation in a Mixed Effects design using R","markdown":{"yaml":{"title":"Power Simulation in a Mixed Effects design using R","author":[{"name":"Chris Jungerius"},{"email":"d.c.jungerius@vu.nl"}],"format":"html","html":null,"warning":false,"error":false},"headingText":"Our model is simple: RT is dependent on distractor presence, with a random slope and intercept for each subject. More complex models are left as an exercise to the reader.","containsRefs":true,"markdown":"\n\nIn this notebook we'll go through a quick example of setting up a power analysis, using data from an existing, highly-powered study to make credible parameter estimates. The code for setting up a simulation is inspired by/shamelessly stolen from a great tutorial about this topic by @debruineUnderstandingMixedEffectsModels2021 and Lisa DeBruine's appendix on its application for sensitivity analysis @debruineAppendix1cSensitivity2020. The aim of this tutorial is two-fold:\n\n1. To demonstrate this approach for the most basic mixed model (using it only to deal with repeated measures - no nesting, no crossed random effects with stimuli types, etc.) which is a very common use of the technique for researchers in my immediate environment (visual attention research).\n2. To translate this approach to different languages - although I love R and encourage everyone to use it for statistical analysis, [Python](python.qmd) remains in use by a sizeable number of researchers, and I would also like to introduce [Julia](julia.qmd) as an alternative.\n\nBefore we do anything, let's import all the packages we will need:\n\n```{r output: false}\nlibrary(tidyverse) # Data wrangling, plotting and general awesomeness\nlibrary(lmerTest) # Mixed modeling using lme4 with better support for tests\nlibrary(broom.mixed) # To make pretty tables\nlibrary(knitr) # To print those pretty tables\nlibrary(faux) # Much easier random effects simulation\n\nset.seed(90059)\n```\n\nIn this example, we will make an estimate of the number of participants we need to replicate a simple and well-established experimental finding: The capture of attention by a colour singleton during visual search for a unique shape singleton. For this example, we are fortunate in that there are many studies of this effect for us to base our parameter estimates on. One recent example is a highly-powered study by Kirsten Adam from the Serences lab purpose-built to be used for sensitivity analysis. First let's import the data for our specific case from the @adamClassicVisualSearch2021 study, which is freely available [in an OSF repository](https://osf.io/u7wvy/), and look at the data.\n\nNote that when previous data doesn't exist (or even if it does, but you don't trust that it's sufficient to base your effect estimates on) there are alternative ways of determining such parameters, including formally determining a smallest effect size of interest @lakensEquivalenceTestingPsychological2018.\n\nThe data we chose is from experiment 1c: variable colour singleton search.\nWe are interested in the raw trial data, not the summary data (We are doing a mixed model after all, not an ANOVA) so we have to grab all the raw files and concatenate them.\n\n```{r}\ndf <- list.files(\n    path = \"./Experiment_1c\",\n    full.names = T\n) %>%\n    lapply(\n        read_csv,\n        col_types = cols(\n            gender = \"c\",\n            set_size = \"f\"\n        )\n    ) %>%\n    bind_rows()\n```\n\nOnce it's imported, we can take a look at our data, e.g., looking at subject means between the two conditions:\n\n```{r}\ndf %>%\n    filter(\n        acc == 1,\n        set_size == 4\n    ) %>%\n    mutate(rt = rt * 1000) %>%\n    ggplot(\n        aes(\n            x = distractor,\n            y = rt,\n            color = as.factor(subject),\n            group = as.factor(subject)\n        )\n    ) +\n    guides(color = \"none\") +\n    stat_summary(\n        fun.data = \"mean_se\",\n        size = 1,\n        linewidth = 1\n    ) +\n    stat_summary(\n      fun = \"mean\",\n      geom=\"line\",\n      linewidth=1\n    )+\n    theme_bw() +\n    ggtitle(\"Reaction time by participant\") +\n    xlab(\"Colour singleton\") +\n    ylab(\"Reaction time (ms)\") +\n    theme(text = element_text(size = 20))\n\n```\n\nWe can clearly see typical atttentional capture effects in the data. Now that we have the data, let's model it:\n\n```{r}\nd <- df %>%\n    filter(\n        acc == 1,\n        set_size == 4\n    ) %>%\n    mutate(rt = rt * 1000)\n\n\nm1 <- lmer(rt ~ distractor + (distractor | subject), data = d)\n\nkable(tidy(m1))\n```\n\nThe above model `rt ~ distractor + ( distractor | subject)` is our putative *data generating process*, the parameters that we believe underly the generation of observed dependent variables, and the relationship between those parameters. The table shown above gives us parameter estimates for all fixed and random effects in the model. Now let's plug those parameters into a simulation!\n\n```{r}\n\nn_subj <- 10      # number of subjects\nn_present <- 200  # number of trials with a singleton present\nn_absent <- 200   # number of trials without a singleton\nbeta_0 <- 650     # grand mean\nbeta_1 <- 30      # effect of distractor presence\ntau_0 <- 80       # by-subject random intercept sd\ntau_1 <- 15       # by-subject random slope sd\nrho <- 0.35       # correlation between intercept and slope\nsigma <- 175      # residual nose\n\n```\n\n```{r}\n\n# Generate a dataframe with one column per subject\ndat_sim <- add_random(subj = n_subj) %>%\n    # Each subject does both types of trials\n    add_within(\"subj\", singleton = c(\"absent\", \"present\")) %>%\n    # Because these trials are interchangeable, we expand the dataframe to account for trial numbers using the uncount trick\n    add_between(\"singleton\", trial_number=c(n_absent, n_present)) %>%\n    uncount(trial_number) %>% \n    # Give each participant a random intercept and slope\n    add_ranef(\"subj\", T0s = tau_0, T1s = tau_1, .cors = rho) %>%\n    # Account for residual variance with the sigma term - random noise on each trial\n    mutate(sigma = rnorm(nrow(.), mean = 0, sd = sigma)) %>%\n    # Contrast code singleton so we can do the little summation at the bottom\n    add_contrast(\"singleton\", \"treatment\", colnames = \"s\") %>%\n    # Give each trial the right mix of Intercept, slope, random effects, and residual noise\n    mutate(rt = beta_0 + T0s + (beta_1 + T1s) * s + sigma)\n\n```\n\nData generated! Does it look like we'd expect?\n\n```{r}\ndat_sim %>% \n    ggplot(\n        aes(\n            x = singleton,\n            y = rt,\n            color = subj,\n            group = subj\n        )\n    ) +\n    guides(color = \"none\") +\n    stat_summary(\n        fun.data = \"mean_se\",\n        size = 1,\n        linewidth = 1\n    ) +\n    stat_summary(\n      fun = \"mean\",\n      geom=\"line\",\n      linewidth=1\n    )+\n    theme_bw() +\n  ggtitle(\"Reaction time by participant (simulated)\")+\n  xlab(\"Colour singleton\")+\n  ylab(\"Reaction time (ms)\")+\n  theme(text=element_text(size=20))\n\n```\n\nLooks comparable to the original data! Now let's fit a model to see if we recover the parameters:\n\n```{r}\nm_sim <- lmer(rt ~ singleton + (singleton | subj), dat_sim)\nkable(tidy(m_sim))\n```\n\n```{r}\nmy_sim_data <- function(\n    n_subj = 5, # number of subjects\n    n_absent = 200, # number of trials per condition\n    n_present = 200,\n    beta_0 = 650, # grand mean\n    beta_1 = 30, # effect of distractor presence\n    tau_0 = 80, # by-subject random intercept sd\n    tau_1 = 15, # by-subject random slope sd\n    rho = 0.35, # correlation between intercept and slope\n    sigma = 175) {\n    dat_sim <- add_random(subj = n_subj) %>%\n    add_within(\"subj\", singleton = c(\"absent\", \"present\")) %>%\n    add_between(\"singleton\", trial_number=c(n_absent, n_present)) %>%\n    uncount(trial_number) %>% \n    add_ranef(\"subj\", T0s = tau_0, T1s = tau_1, .cors = rho) %>%\n    mutate(sigma = rnorm(nrow(.), mean = 0, sd = sigma)) %>%\n    add_contrast(\"singleton\", \"treatment\", colnames = \"s\") %>%\n    mutate(rt = beta_0 + T0s + (beta_1 + T1s) * s + sigma)\n\n    dat_sim\n}\n```\n\nThe above function simulates data. The function below combines it with a model fit so we have a function that can be repeatedly called during our power analysis.\n\n```{r}\n\nsingle_run <- function(filename = NULL, ...) {\n    dat_sim <- my_sim_data(...)\n      # run lmer and capture any warnings\n  ww <- \"\"\n  suppressMessages(suppressWarnings(\n    mod_sim <- withCallingHandlers({\n      lmer(rt ~ singleton + (singleton | subj),\n           dat_sim, REML = FALSE)},\n      warning = function(w) { ww <<- w$message }\n    )\n  ))\n  \n  # get results table and add rep number and any warnings\n  sim_results <- broom.mixed::tidy(mod_sim) %>%\n    mutate(warnings = ww)\n  \n  # add columns for the specified parameters\n  params <- list(...)\n  for (name in names(params)) {\n    sim_results[name] <- params[name]\n  }\n\n  # append the results to a file if filename is set\n  if (!is.null(filename)) {\n    append <- file.exists(filename) # append if the file exists\n    write_csv(sim_results, filename, append = append)\n  }\n  \n  sim_results\n}\n\n\n```\n\nNow let's run our sensitivity analysis - we will run our simulation 1000 times for each combination of parameters, and record how often the fixed effect estimates reach significance:\n\n```{r}\nnreps <- 1000\n\nparams <- crossing(\n  rep        = 1:nreps,   # number of runs\n  n_subj     = 10,        # number of subjects\n  n_absent   = 150,       # number of trials per condition\n  n_present  = 150,\n  beta_0     = 650,       # grand mean\n  beta_1     = 30,        # effect of distractor presence\n  tau_0      = 80,        # by-subject random intercept sd\n  tau_1      = 15,        # by-subject random slope sd\n  rho        = 0.35,      # correlation between intercept and slope\n  sigma      = 175        # residual (standard deviation)\n) %>%\n  select(-rep)\n  \nsims <- purrr::pmap_df(params,single_run,filename=NULL)\n\n# calculate mean estimates and power for specified alpha\nalpha <- 0.05\nsims %>% \n  filter(effect == \"fixed\") %>%\n  group_by(term) %>%\n  summarize(\n    mean_estimate = mean(estimate),\n    mean_se = mean(std.error),\n    power = mean(p.value < alpha),\n    .groups = \"drop\"\n  )\n```\n\nIf we want to run our sensitivity analysis across a given parameter space, we'll have to map the function single_run to generate data across this space, for example, over a varying number of participants:\n\n```{r}\nfilename1 <- \"sens_faux.csv\"\nnreps <- 1000                # number of replications per parameter combo\n\nparams <- crossing(\n  rep         = 1:nreps,     # repeats each combo nreps times\n  n_subj      = seq(2, 15),  # number of subjects\n  n_present   = 150,         # number of distractor present trials\n  n_absent    = 150,         # number of distractor absent trials\n  beta_0      = 650,         # Intercept\n  beta_1      = 30,          # effect of distractor presence\n  tau_0       = 80,          # by-subject random intercept sd\n  tau_1       = 15,          # by-subject random slope sd\n  rho         = 0.35,        # correlation between intercept and slope\n  sigma       = 175          # residual (standard deviation)\n) %>%\n  select(-rep)\n\nif (!file.exists(filename1)) {\n  # run a simulation for each row of params\n  # and save to a file on each rep\n  sims1 <- purrr::pmap_df(params, single_run, filename = filename1)\n}\n```\n\nNote that the above could obviously also be run over other dimensions of our parameter space, e.g. for different estimates of the fixed effects, amount of noise, number of trials, etc. etc., by changing the `params` list.\nHow did we do? Let's take a look at our power curve.\n\n```{r}\n\n# read saved simulation data\n# NB: col_types is set for warnings in case \n#     the first 1000 rows don't have any\nct <- cols(warnings = col_character(),\n           # makes sure plots display in this order\n           group = col_factor(ordered = TRUE),\n           term = col_factor(ordered = TRUE))\nsims1 <- read_csv(filename1, col_types = ct)\n\npower1 <- sims1 %>% \n  filter(effect == \"fixed\", term == \"singleton.present-absent\") %>%\n  group_by(n_subj) %>%\n  summarise(\n    mean_estimate = mean(estimate),\n    mean_se = mean(std.error),\n    power = mean(p.value < alpha),\n    .groups = \"drop\"\n  ) \n\npower1 %>%\n  ggplot(aes(n_subj, power)) +\n  geom_point() +\n  geom_smooth(se = FALSE) +\n  ylim(0, 1) +\n  geom_hline(yintercept=0.8,linetype=\"dashed\")+\n  scale_x_continuous(name = \"Effect of number of participants\") +\n  ggtitle(\"Power for designs varying in sample size\") +\n  theme_bw()\n```\n\nOur power analysis has determined that, with the parameters established above, we need ~8 or more participants to reliably detect an effect!\n\nThe code used above is specific to power analysis for mixed models, but the approach generalises to other methods too, of course! The above code can easily be wrangled to handle different model types (simply change the model definition in `single_run` and make sure to capture the right parameters), and even Bayesian approaches. (For a thorough example of doing power analysis with Bayesian methods and the awesome bayesian regression package `brms`, see @kurzBayesianPowerAnalysis2021.)\n\nEven if the above code is spaghetti to you (~~I was originally planning on also converting it to python/matlab, but there are only so many hours in the day~~[click here for a python version](python.qmd) or [here for a julia version](julia.qmd)), I hope you will take away a few things from this tutorial:\n\n- Power analysis is nothing more than testing whether we can recover the parameters of a hypothesised data-generating process reliably using our statistical test of choice.\n- We can determine the parameters for such a data-generating process in the same way we formulate hypotheses (and indeed, *in some ways these two things are one and the same*): we use our knowledge, intuition, and previous work to inform our decision-making.\n- If you have a hypothetical data-generating process, you can simulate data by simply formalising that process as code and letting it simulate a dataset\n- Simulation can help you answer questions about your statistical approach that are difficult to answer with other tools\n\n### References\n\n::: {#refs}\n:::","srcMarkdownNoYaml":"\n\nIn this notebook we'll go through a quick example of setting up a power analysis, using data from an existing, highly-powered study to make credible parameter estimates. The code for setting up a simulation is inspired by/shamelessly stolen from a great tutorial about this topic by @debruineUnderstandingMixedEffectsModels2021 and Lisa DeBruine's appendix on its application for sensitivity analysis @debruineAppendix1cSensitivity2020. The aim of this tutorial is two-fold:\n\n1. To demonstrate this approach for the most basic mixed model (using it only to deal with repeated measures - no nesting, no crossed random effects with stimuli types, etc.) which is a very common use of the technique for researchers in my immediate environment (visual attention research).\n2. To translate this approach to different languages - although I love R and encourage everyone to use it for statistical analysis, [Python](python.qmd) remains in use by a sizeable number of researchers, and I would also like to introduce [Julia](julia.qmd) as an alternative.\n\nBefore we do anything, let's import all the packages we will need:\n\n```{r output: false}\nlibrary(tidyverse) # Data wrangling, plotting and general awesomeness\nlibrary(lmerTest) # Mixed modeling using lme4 with better support for tests\nlibrary(broom.mixed) # To make pretty tables\nlibrary(knitr) # To print those pretty tables\nlibrary(faux) # Much easier random effects simulation\n\nset.seed(90059)\n```\n\nIn this example, we will make an estimate of the number of participants we need to replicate a simple and well-established experimental finding: The capture of attention by a colour singleton during visual search for a unique shape singleton. For this example, we are fortunate in that there are many studies of this effect for us to base our parameter estimates on. One recent example is a highly-powered study by Kirsten Adam from the Serences lab purpose-built to be used for sensitivity analysis. First let's import the data for our specific case from the @adamClassicVisualSearch2021 study, which is freely available [in an OSF repository](https://osf.io/u7wvy/), and look at the data.\n\nNote that when previous data doesn't exist (or even if it does, but you don't trust that it's sufficient to base your effect estimates on) there are alternative ways of determining such parameters, including formally determining a smallest effect size of interest @lakensEquivalenceTestingPsychological2018.\n\nThe data we chose is from experiment 1c: variable colour singleton search.\nWe are interested in the raw trial data, not the summary data (We are doing a mixed model after all, not an ANOVA) so we have to grab all the raw files and concatenate them.\n\n```{r}\ndf <- list.files(\n    path = \"./Experiment_1c\",\n    full.names = T\n) %>%\n    lapply(\n        read_csv,\n        col_types = cols(\n            gender = \"c\",\n            set_size = \"f\"\n        )\n    ) %>%\n    bind_rows()\n```\n\nOnce it's imported, we can take a look at our data, e.g., looking at subject means between the two conditions:\n\n```{r}\ndf %>%\n    filter(\n        acc == 1,\n        set_size == 4\n    ) %>%\n    mutate(rt = rt * 1000) %>%\n    ggplot(\n        aes(\n            x = distractor,\n            y = rt,\n            color = as.factor(subject),\n            group = as.factor(subject)\n        )\n    ) +\n    guides(color = \"none\") +\n    stat_summary(\n        fun.data = \"mean_se\",\n        size = 1,\n        linewidth = 1\n    ) +\n    stat_summary(\n      fun = \"mean\",\n      geom=\"line\",\n      linewidth=1\n    )+\n    theme_bw() +\n    ggtitle(\"Reaction time by participant\") +\n    xlab(\"Colour singleton\") +\n    ylab(\"Reaction time (ms)\") +\n    theme(text = element_text(size = 20))\n\n```\n\nWe can clearly see typical atttentional capture effects in the data. Now that we have the data, let's model it:\n\n```{r}\nd <- df %>%\n    filter(\n        acc == 1,\n        set_size == 4\n    ) %>%\n    mutate(rt = rt * 1000)\n\n# Our model is simple: RT is dependent on distractor presence, with a random slope and intercept for each subject. More complex models are left as an exercise to the reader.\n\nm1 <- lmer(rt ~ distractor + (distractor | subject), data = d)\n\nkable(tidy(m1))\n```\n\nThe above model `rt ~ distractor + ( distractor | subject)` is our putative *data generating process*, the parameters that we believe underly the generation of observed dependent variables, and the relationship between those parameters. The table shown above gives us parameter estimates for all fixed and random effects in the model. Now let's plug those parameters into a simulation!\n\n```{r}\n\nn_subj <- 10      # number of subjects\nn_present <- 200  # number of trials with a singleton present\nn_absent <- 200   # number of trials without a singleton\nbeta_0 <- 650     # grand mean\nbeta_1 <- 30      # effect of distractor presence\ntau_0 <- 80       # by-subject random intercept sd\ntau_1 <- 15       # by-subject random slope sd\nrho <- 0.35       # correlation between intercept and slope\nsigma <- 175      # residual nose\n\n```\n\n```{r}\n\n# Generate a dataframe with one column per subject\ndat_sim <- add_random(subj = n_subj) %>%\n    # Each subject does both types of trials\n    add_within(\"subj\", singleton = c(\"absent\", \"present\")) %>%\n    # Because these trials are interchangeable, we expand the dataframe to account for trial numbers using the uncount trick\n    add_between(\"singleton\", trial_number=c(n_absent, n_present)) %>%\n    uncount(trial_number) %>% \n    # Give each participant a random intercept and slope\n    add_ranef(\"subj\", T0s = tau_0, T1s = tau_1, .cors = rho) %>%\n    # Account for residual variance with the sigma term - random noise on each trial\n    mutate(sigma = rnorm(nrow(.), mean = 0, sd = sigma)) %>%\n    # Contrast code singleton so we can do the little summation at the bottom\n    add_contrast(\"singleton\", \"treatment\", colnames = \"s\") %>%\n    # Give each trial the right mix of Intercept, slope, random effects, and residual noise\n    mutate(rt = beta_0 + T0s + (beta_1 + T1s) * s + sigma)\n\n```\n\nData generated! Does it look like we'd expect?\n\n```{r}\ndat_sim %>% \n    ggplot(\n        aes(\n            x = singleton,\n            y = rt,\n            color = subj,\n            group = subj\n        )\n    ) +\n    guides(color = \"none\") +\n    stat_summary(\n        fun.data = \"mean_se\",\n        size = 1,\n        linewidth = 1\n    ) +\n    stat_summary(\n      fun = \"mean\",\n      geom=\"line\",\n      linewidth=1\n    )+\n    theme_bw() +\n  ggtitle(\"Reaction time by participant (simulated)\")+\n  xlab(\"Colour singleton\")+\n  ylab(\"Reaction time (ms)\")+\n  theme(text=element_text(size=20))\n\n```\n\nLooks comparable to the original data! Now let's fit a model to see if we recover the parameters:\n\n```{r}\nm_sim <- lmer(rt ~ singleton + (singleton | subj), dat_sim)\nkable(tidy(m_sim))\n```\n\n```{r}\nmy_sim_data <- function(\n    n_subj = 5, # number of subjects\n    n_absent = 200, # number of trials per condition\n    n_present = 200,\n    beta_0 = 650, # grand mean\n    beta_1 = 30, # effect of distractor presence\n    tau_0 = 80, # by-subject random intercept sd\n    tau_1 = 15, # by-subject random slope sd\n    rho = 0.35, # correlation between intercept and slope\n    sigma = 175) {\n    dat_sim <- add_random(subj = n_subj) %>%\n    add_within(\"subj\", singleton = c(\"absent\", \"present\")) %>%\n    add_between(\"singleton\", trial_number=c(n_absent, n_present)) %>%\n    uncount(trial_number) %>% \n    add_ranef(\"subj\", T0s = tau_0, T1s = tau_1, .cors = rho) %>%\n    mutate(sigma = rnorm(nrow(.), mean = 0, sd = sigma)) %>%\n    add_contrast(\"singleton\", \"treatment\", colnames = \"s\") %>%\n    mutate(rt = beta_0 + T0s + (beta_1 + T1s) * s + sigma)\n\n    dat_sim\n}\n```\n\nThe above function simulates data. The function below combines it with a model fit so we have a function that can be repeatedly called during our power analysis.\n\n```{r}\n\nsingle_run <- function(filename = NULL, ...) {\n    dat_sim <- my_sim_data(...)\n      # run lmer and capture any warnings\n  ww <- \"\"\n  suppressMessages(suppressWarnings(\n    mod_sim <- withCallingHandlers({\n      lmer(rt ~ singleton + (singleton | subj),\n           dat_sim, REML = FALSE)},\n      warning = function(w) { ww <<- w$message }\n    )\n  ))\n  \n  # get results table and add rep number and any warnings\n  sim_results <- broom.mixed::tidy(mod_sim) %>%\n    mutate(warnings = ww)\n  \n  # add columns for the specified parameters\n  params <- list(...)\n  for (name in names(params)) {\n    sim_results[name] <- params[name]\n  }\n\n  # append the results to a file if filename is set\n  if (!is.null(filename)) {\n    append <- file.exists(filename) # append if the file exists\n    write_csv(sim_results, filename, append = append)\n  }\n  \n  sim_results\n}\n\n\n```\n\nNow let's run our sensitivity analysis - we will run our simulation 1000 times for each combination of parameters, and record how often the fixed effect estimates reach significance:\n\n```{r}\nnreps <- 1000\n\nparams <- crossing(\n  rep        = 1:nreps,   # number of runs\n  n_subj     = 10,        # number of subjects\n  n_absent   = 150,       # number of trials per condition\n  n_present  = 150,\n  beta_0     = 650,       # grand mean\n  beta_1     = 30,        # effect of distractor presence\n  tau_0      = 80,        # by-subject random intercept sd\n  tau_1      = 15,        # by-subject random slope sd\n  rho        = 0.35,      # correlation between intercept and slope\n  sigma      = 175        # residual (standard deviation)\n) %>%\n  select(-rep)\n  \nsims <- purrr::pmap_df(params,single_run,filename=NULL)\n\n# calculate mean estimates and power for specified alpha\nalpha <- 0.05\nsims %>% \n  filter(effect == \"fixed\") %>%\n  group_by(term) %>%\n  summarize(\n    mean_estimate = mean(estimate),\n    mean_se = mean(std.error),\n    power = mean(p.value < alpha),\n    .groups = \"drop\"\n  )\n```\n\nIf we want to run our sensitivity analysis across a given parameter space, we'll have to map the function single_run to generate data across this space, for example, over a varying number of participants:\n\n```{r}\nfilename1 <- \"sens_faux.csv\"\nnreps <- 1000                # number of replications per parameter combo\n\nparams <- crossing(\n  rep         = 1:nreps,     # repeats each combo nreps times\n  n_subj      = seq(2, 15),  # number of subjects\n  n_present   = 150,         # number of distractor present trials\n  n_absent    = 150,         # number of distractor absent trials\n  beta_0      = 650,         # Intercept\n  beta_1      = 30,          # effect of distractor presence\n  tau_0       = 80,          # by-subject random intercept sd\n  tau_1       = 15,          # by-subject random slope sd\n  rho         = 0.35,        # correlation between intercept and slope\n  sigma       = 175          # residual (standard deviation)\n) %>%\n  select(-rep)\n\nif (!file.exists(filename1)) {\n  # run a simulation for each row of params\n  # and save to a file on each rep\n  sims1 <- purrr::pmap_df(params, single_run, filename = filename1)\n}\n```\n\nNote that the above could obviously also be run over other dimensions of our parameter space, e.g. for different estimates of the fixed effects, amount of noise, number of trials, etc. etc., by changing the `params` list.\nHow did we do? Let's take a look at our power curve.\n\n```{r}\n\n# read saved simulation data\n# NB: col_types is set for warnings in case \n#     the first 1000 rows don't have any\nct <- cols(warnings = col_character(),\n           # makes sure plots display in this order\n           group = col_factor(ordered = TRUE),\n           term = col_factor(ordered = TRUE))\nsims1 <- read_csv(filename1, col_types = ct)\n\npower1 <- sims1 %>% \n  filter(effect == \"fixed\", term == \"singleton.present-absent\") %>%\n  group_by(n_subj) %>%\n  summarise(\n    mean_estimate = mean(estimate),\n    mean_se = mean(std.error),\n    power = mean(p.value < alpha),\n    .groups = \"drop\"\n  ) \n\npower1 %>%\n  ggplot(aes(n_subj, power)) +\n  geom_point() +\n  geom_smooth(se = FALSE) +\n  ylim(0, 1) +\n  geom_hline(yintercept=0.8,linetype=\"dashed\")+\n  scale_x_continuous(name = \"Effect of number of participants\") +\n  ggtitle(\"Power for designs varying in sample size\") +\n  theme_bw()\n```\n\nOur power analysis has determined that, with the parameters established above, we need ~8 or more participants to reliably detect an effect!\n\nThe code used above is specific to power analysis for mixed models, but the approach generalises to other methods too, of course! The above code can easily be wrangled to handle different model types (simply change the model definition in `single_run` and make sure to capture the right parameters), and even Bayesian approaches. (For a thorough example of doing power analysis with Bayesian methods and the awesome bayesian regression package `brms`, see @kurzBayesianPowerAnalysis2021.)\n\nEven if the above code is spaghetti to you (~~I was originally planning on also converting it to python/matlab, but there are only so many hours in the day~~[click here for a python version](python.qmd) or [here for a julia version](julia.qmd)), I hope you will take away a few things from this tutorial:\n\n- Power analysis is nothing more than testing whether we can recover the parameters of a hypothesised data-generating process reliably using our statistical test of choice.\n- We can determine the parameters for such a data-generating process in the same way we formulate hypotheses (and indeed, *in some ways these two things are one and the same*): we use our knowledge, intuition, and previous work to inform our decision-making.\n- If you have a hypothetical data-generating process, you can simulate data by simply formalising that process as code and letting it simulate a dataset\n- Simulation can help you answer questions about your statistical approach that are difficult to answer with other tools\n\n### References\n\n::: {#refs}\n:::"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["powersim.bib"],"csl":"apa.csl","title":"Power Simulation in a Mixed Effects design using R","author":[{"name":"Chris Jungerius"},{"email":"d.c.jungerius@vu.nl"}],"html":null},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}